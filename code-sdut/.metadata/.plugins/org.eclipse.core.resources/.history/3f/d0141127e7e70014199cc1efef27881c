package cn.tool.validate;

import java.awt.Color;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.JLabel;
import javax.swing.text.JTextComponent;

import org.apache.commons.lang.StringUtils;

import cn.tool.config.ToolConfig;
import cn.tool.lang.ip.Ipv4Utils;
import cn.tool.lang.swing.ComFactory;
import cn.tool.ui.dialog.AbstractDialog;
import cn.tool.validate.annotation.Validations;
import cn.tool.validate.annotation.Validations.Type;
import cn.tool.validate.model.DataModel;

/**
 * 数据验证
 * 
 * @author chongming
 *
 */
public class ValidateService {

	public boolean validate(AbstractDialog dialog) {
		boolean validateResult = true;
		List<DataModel> models = getDataModels(dialog);
		
		for (final DataModel model : models) {
			if (Type.ip.equals(model.getType())) {
				if (!validateIpv4(model) || !validateIpv6(model)) {
					validateResult = false;
				}
			} else if (Type.text.equals(model.getType())) {
				Pattern pattern = Pattern.compile(model.getRegular());
				Matcher matcher = pattern.matcher(model.getValue() + "");
				if (!matcher.matches()) {
					setValidateInfo(model.getInfoLabel(), 
							model.getInfo());
					validateResult = false;
				}
			} else if (Type.port.equals(model.getType())) {
				if (!validatePort(model)) {
					validateResult = false;
				}
			}
		}
		return validateResult;
	}

	/**
	 * 验证端口号
	 * @param dataModel
	 * @return
	 */
	private boolean validatePort(DataModel dataModel) {
		String portStr = dataModel.getValue();
		
		if (StringUtils.isBlank(portStr)) {
			setValidateInfo(dataModel.getInfoLabel(), 
					ToolConfig.i18.getProperty("soft.deploy.tool.host.port.null"));
		}
		
		try {
			int port = Integer.parseInt(portStr);
			if (port < 0 || port > 65535) {
				setValidateInfo(dataModel.getInfoLabel(), 
						ToolConfig.i18.getProperty("soft.deploy.tool.host.port.error"));
				return false;
			}
		} catch (Exception e) {
			setValidateInfo(dataModel.getInfoLabel(), 
					ToolConfig.i18.getProperty("soft.deploy.tool.host.port.error"));
			return false;
		}
		
		return false;
	}

	private boolean validateIpv6(DataModel dataModel) {
		// TODO
		return true;
	}

	/**
	 * 验证IPv4
	 * 
	 * @param dataModel
	 * @return
	 */
	private boolean validateIpv4(DataModel dataModel) {
		String hostIp = dataModel.getValue();
		if (StringUtils.isBlank(hostIp)) {
			setValidateInfo(dataModel.getInfoLabel(), 
					ToolConfig.i18.getProperty("soft.deploy.tool.host.ip.null"));
			return false;
		} else if (!Ipv4Utils.checkIpFormat(hostIp)) {
			setValidateInfo(dataModel.getInfoLabel(), 
					ToolConfig.i18.getProperty("soft.deploy.tool.host.ip.error"));
			return false;
		} else if (!Ipv4Utils.isHostIP(hostIp)) {
			setValidateInfo(dataModel.getInfoLabel(), 
					ToolConfig.i18.getProperty("soft.deploy.tool.host.ip.unused"));
			return false;
		}
		return true;
	}

	/**
	 * 设置校验失败提示信息
	 * @param label
	 * @param tipText
	 */
	private void setValidateInfo(JLabel label, String tipText) {
		label.setText(" " + tipText);
		label.setForeground(Color.RED);
	}
	
	/**
	 * 封装数据模型DataModel
	 * 
	 */
	private List<DataModel> getDataModels(AbstractDialog dialog) {
		List<DataModel> dataModels = new ArrayList<>();
		
		Class<?> clazz  = null;
		do {
			if (null == clazz) {
				clazz = dialog.getDialog().getClass();
			} else {
				clazz = clazz.getSuperclass();
			}
			
			for (Field field : clazz.getDeclaredFields()) {
				if (field.isAnnotationPresent(Validations.class)) {
					field.setAccessible(true);
					Validations valaAnno = field.getAnnotation(Validations.class);
					Object dataObj =  field.get(dialog.getDialog());
					
					if (null != dataObj) {
						if (dataObj instanceof JTextComponent) {
							JTextComponent textBox = (JTextComponent) dataObj;
							DataModel model = getTextBoxDataModels(textBox, valaAnno);
							if (null != model) {
								dataModels.add(model);
							}
						}
					}
					field.setAccessible(false);
				}
			}		
		} while(!AbstractDialog.class.equals(clazz));
		
		return dataModels;
	}
	
	/**
	 * JTextComponent类型的 DataModels
	 * @param textBox
	 * @param valaAnno
	 */
	private DataModel getTextBoxDataModels(JTextComponent
			textBox, Validations valaAnno) {
		
		boolean enabled = textBox.isEnabled();
		/*
		 * 组件不可用时不验证
		 */
		if (enabled) {
			JLabel label = (JLabel) getDialog().getClass().getMethod(
					valaAnno.getInfoLabel()).invoke(getDialog());
			
			if (!labelMap.containsKey(label)) {
				labelMap.put(label, label.getText());
				ComFactory.setMouseListener(textBox, label, labelMap.get(label));
			}
			
			DataModel dataModel = new DataModel();
			dataModel.setInfoLabel(label);
			dataModel.setType(valaAnno.type());
			dataModel.setValue(textBox.getText());
			dataModel.setInfo(ToolConfig.i18.getProperty(valaAnno.info()));
			dataModel.setRegular(valaAnno.regular());
			return dataModel;
		}
		return null;
	}

}
